---
import Layout from "@/layouts/Layout.astro";
import Squad from "@/components/Squad.astro";
import ResultsTable from "@/components/ResultsTable.astro";
import TeamHeader from "@/components/TeamHeader.astro";
import { translator } from "@/utils/dictionary.js";
import "@/styles/global.css";

const { id } = Astro.params;
const teamResponse = await fetch(`http://localhost:1234/teams/${id}`);
const teamData = await teamResponse.json();
const team = teamData[0];

const stadiumResponse = await fetch(
  `http://localhost:1234/teams/${id}/stadium`
);
const stadiumData = await stadiumResponse.json();
const stadium = stadiumData[0];

const managerResponse = await fetch(
  `http://localhost:1234/teams/${id}/manager`
);
const managerData = await managerResponse.json();
const manager = managerData[0];

const resultsResponse = await fetch(
  `http://localhost:1234/teams/${id}/matches`
);
const resultsData = await resultsResponse.json();

const playersData = await fetch(`http://localhost:1234/teams/${id}/players`);
const players = await playersData.json();

const tableResponse = await fetch("http://localhost:1234/leagues/1/table");
const tableData = await tableResponse.json();
const teamPosition =
  tableData.findIndex(
    (teamLeague: { team_id: number }) => teamLeague.team_id === team.id
  ) + 1;
const teamStats = tableData[teamPosition - 1];

export async function getStaticPaths() {
  const teamsResponse = await fetch("http://localhost:1234/teams");
  const teamsData = await teamsResponse.json();
  const paths = teamsData.map((team: { id: number }) => ({
    params: { id: team.id },
  }));

  return paths;
}

export async function getStaticProps({ params }: { params: { id: string } }) {
  const { id } = params;
  const teamResponse = await fetch(`http://localhost:1234/teams/${id}`);
  const teamData = await teamResponse.json();

  if (!teamData) {
    throw new Error("team not found");
  }

  return { props: { teamData } };
}

const currentLang = Astro.currentLocale || "es";
---

<Layout
  title=`LaLiga | ${team.shortName}`
  description={`All information about ${team.name}`}
>
  <TeamHeader id={id} />
  <div class="py-3 px-2 md:px-5">
    <nav class="flex flex-row w-full justify-around px-5 mb-10">
      <div
        id="squad"
        class={"cursor-pointer text-xl hover:border-laligared transition border-b-4 border-laligared font-bold section w-32 text-center uppercase"}
      >
        {translator(currentLang, "squad")}
      </div>
      <div
        id="results"
        class="cursor-pointer text-xl hover:text-laligared hover:border-laligared transition border-b-4 section w-36 text-center uppercase"
      >
        {translator(currentLang, "results")}
      </div>
    </nav>
    <Squad id="squadSection" team={team} manager={manager} players={players} />
    <section id="resultsSection" class="xl:p-10 hidden">
      <h2
        class="text-3xl text-bold uppercase font-la-liga-font mb-10 text-center"
      >
        {`${team.shortName} ${translator(currentLang, "resultsSection")}`}
      </h2>
      <ResultsTable teamResults={true} matchdayResultsData={resultsData} />
    </section>
  </div>

  <script>
    document.addEventListener("astro:page-load", () => {
      if (window.location.href.includes("#results")) {
        changeTab("results");
      } else if (window.location.href.includes("#squad")) {
        changeTab("squad");
      } else {
        const squadSection = document.getElementById("squadSection");
        if (squadSection) squadSection.classList.remove("hidden");
      }

      const sections = document.querySelectorAll("div.section");
      sections.forEach((section) => {
        section.addEventListener("click", () => changeTab(section.id));
      });

      function changeTab(tab: string) {
        const squadSection = document.getElementById("squadSection");
        const resultsSection = document.getElementById("resultsSection");
        const squad = document.getElementById("squad");
        const results = document.getElementById("results");
        if (tab === "results") {
          squadSection?.classList.add("hidden");
          resultsSection?.classList.remove("hidden");
          if (squad && results) {
            squad.classList.remove("border-laligared");
            squad.classList.remove("font-bold");
            squad.classList.add("hover:text-laligared");
            results.classList.add("border-laligared");
            results.classList.add("font-bold");
            results.classList.remove("hover:text-laligared");
            window.location.href = "#results";
          }
        } else {
          squadSection?.classList.remove("hidden");
          resultsSection?.classList.add("hidden");
          if (squad && results) {
            squad.classList.add("border-laligared");
            squad.classList.add("font-bold");
            squad.classList.remove("hover:text-laligared");
            results.classList.remove("border-laligared");
            results.classList.remove("font-bold");
            results.classList.add("hover:text-laligared");
            window.location.href = "#squad";
          }
        }
      }
    });
  </script>
</Layout>
